// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux8Way(in=load, sel=address[3..5], a=sel0, b=sel1, c=sel2, d=sel3, e=sel4, f=sel5, g=sel6, h=sel7);
    RAM8(in=in, load=sel0, address=address[0..2], out=out0); // 0-7
    RAM8(in=in, load=sel1, address=address[0..2], out=out1); // 8-15
    RAM8(in=in, load=sel2, address=address[0..2], out=out2); // 16-23
    RAM8(in=in, load=sel3, address=address[0..2], out=out3); // 24-31
    RAM8(in=in, load=sel4, address=address[0..2], out=out4); // 32-39
    RAM8(in=in, load=sel5, address=address[0..2], out=out5); // 40-47
    RAM8(in=in, load=sel6, address=address[0..2], out=out6); // 48-55
    RAM8(in=in, load=sel7, address=address[0..2], out=out7); // 56-63
    Mux8Way16(sel=address[3..5], a=out0, b=out1, c=out2, d=out3, e=out4, f=out5, g=out6, h=out7, out=out);
}
